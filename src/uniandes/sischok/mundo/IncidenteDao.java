package uniandes.sischok.mundo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import uniandes.sischok.mundo.Incidente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INCIDENTE.
*/
public class IncidenteDao extends AbstractDao<Incidente, Long> {

    public static final String TABLENAME = "INCIDENTE";

    /**
     * Properties of entity Incidente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdServidor = new Property(1, String.class, "idServidor", false, "ID_SERVIDOR");
        public final static Property Titulo = new Property(2, String.class, "titulo", false, "TITULO");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Zona = new Property(4, Integer.class, "zona", false, "ZONA");
        public final static Property Gravedad = new Property(5, Integer.class, "gravedad", false, "GRAVEDAD");
        public final static Property Latitud = new Property(6, Double.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(7, Double.class, "longitud", false, "LONGITUD");
        public final static Property FechaCreacion = new Property(8, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property UsuarioCreacion = new Property(9, String.class, "usuarioCreacion", false, "USUARIO_CREACION");
    };


    public IncidenteDao(DaoConfig config) {
        super(config);
    }
    
    public IncidenteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INCIDENTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_SERVIDOR' TEXT," + // 1: idServidor
                "'TITULO' TEXT NOT NULL ," + // 2: titulo
                "'DESCRIPCION' TEXT," + // 3: descripcion
                "'ZONA' INTEGER," + // 4: zona
                "'GRAVEDAD' INTEGER," + // 5: gravedad
                "'LATITUD' REAL," + // 6: latitud
                "'LONGITUD' REAL," + // 7: longitud
                "'FECHA_CREACION' INTEGER," + // 8: fechaCreacion
                "'USUARIO_CREACION' TEXT);"); // 9: usuarioCreacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INCIDENTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Incidente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idServidor = entity.getIdServidor();
        if (idServidor != null) {
            stmt.bindString(2, idServidor);
        }
        stmt.bindString(3, entity.getTitulo());
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
 
        Integer zona = entity.getZona();
        if (zona != null) {
            stmt.bindLong(5, zona);
        }
 
        Integer gravedad = entity.getGravedad();
        if (gravedad != null) {
            stmt.bindLong(6, gravedad);
        }
 
        Double latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindDouble(7, latitud);
        }
 
        Double longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindDouble(8, longitud);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(9, fechaCreacion.getTime());
        }
 
        String usuarioCreacion = entity.getUsuarioCreacion();
        if (usuarioCreacion != null) {
            stmt.bindString(10, usuarioCreacion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Incidente readEntity(Cursor cursor, int offset) {
        Incidente entity = new Incidente( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idServidor
            cursor.getString(offset + 2), // titulo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descripcion
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // zona
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gravedad
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // latitud
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // longitud
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // fechaCreacion
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // usuarioCreacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Incidente entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdServidor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitulo(cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZona(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGravedad(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLatitud(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLongitud(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setFechaCreacion(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUsuarioCreacion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Incidente entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Incidente entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
